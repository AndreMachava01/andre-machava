#!/usr/bin/env python3
"""
SCRIPT DE MIGRA√á√ÉO E CORRE√á√ÉO AUTOM√ÅTICA DE FILTROS
Sistema Unificado de Filtros - Migra√ß√£o Completa

Este script realiza migra√ß√£o autom√°tica de filtros antigos para o sistema unificado,
criando configura√ß√µes necess√°rias e corrigindo problemas encontrados.

Funcionalidades:
1. Migra filtros manuais para sistema unificado
2. Cria configura√ß√µes autom√°ticas no filters_config.py
3. Remove CSS e JavaScript inline
4. Corrige problemas de sintaxe
5. Gera templates limpos e padronizados

Autor: Sistema Conception
Data: 2025
"""

import os
import re
import sys
import json
import logging
from pathlib import Path
from typing import Dict, List, Set, Tuple, Optional
from dataclasses import dataclass
from datetime import datetime

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('filtros_migracao.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class MigrationTask:
    """Representa uma tarefa de migra√ß√£o"""
    template_path: str
    entity_name: str
    current_filters: List[Dict]
    target_config: Dict
    status: str  # 'pending', 'in_progress', 'completed', 'error'

class FilterMigrator:
    """Classe principal para migra√ß√£o de filtros"""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.templates_dir = self.project_root / 'templates'
        self.filters_config_file = self.project_root / 'meuprojeto' / 'empresa' / 'filters_config.py'
        self.migration_tasks: List[MigrationTask] = []
        self.migrations_completed = []
        self.errors = []
        
    def run_full_migration(self) -> Dict:
        """Executa migra√ß√£o completa dos filtros"""
        logger.info("üöÄ Iniciando migra√ß√£o completa dos filtros...")
        
        # 1. Identificar templates que precisam de migra√ß√£o
        self._identify_templates_for_migration()
        
        # 2. Analisar filtros existentes
        self._analyze_existing_filters()
        
        # 3. Criar configura√ß√µes necess√°rias
        self._create_filter_configurations()
        
        # 4. Migrar templates
        self._migrate_templates()
        
        # 5. Validar migra√ß√µes
        self._validate_migrations()
        
        # 6. Gerar relat√≥rio
        report = self._generate_migration_report()
        
        logger.info("‚úÖ Migra√ß√£o completa finalizada!")
        return report
    
    def _identify_templates_for_migration(self):
        """Identifica templates que precisam de migra√ß√£o"""
        logger.info("üîç Identificando templates para migra√ß√£o...")
        
        # Padr√µes para identificar filtros manuais/antigos
        manual_filter_patterns = [
            r'<form[^>]*method\s*=\s*[\'"]get[\'"][^>]*>',
            r'<input[^>]*name\s*=\s*[\'"](q|search|filter)[\'"]',
            r'<select[^>]*name\s*=\s*[\'"](status|departamento|cargo|tipo|sucursal)[\'"]',
            r'<input[^>]*type\s*=\s*[\'"]date[\'"][^>]*name\s*=\s*[\'"](data_|date_)',
            r'<button[^>]*type\s*=\s*[\'"]submit[\'"]'
        ]
        
        for template_file in self.templates_dir.rglob('*.html'):
            try:
                with open(template_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Verificar se j√° usa sistema unificado
                if 'filters_unified.html' in content:
                    continue
                
                # Verificar se tem filtros manuais
                has_manual_filters = any(re.search(pattern, content) for pattern in manual_filter_patterns)
                
                if has_manual_filters:
                    entity_name = self._detect_entity_from_path(template_file)
                    if entity_name:
                        self.migration_tasks.append(MigrationTask(
                            template_path=str(template_file),
                            entity_name=entity_name,
                            current_filters=[],
                            target_config={},
                            status='pending'
                        ))
                        logger.info(f"üìã Template identificado para migra√ß√£o: {template_file.name} (entidade: {entity_name})")
                
            except Exception as e:
                logger.error(f"Erro ao analisar {template_file}: {e}")
    
    def _detect_entity_from_path(self, file_path: Path) -> Optional[str]:
        """Detecta nome da entidade baseado no caminho do arquivo"""
        path_parts = file_path.parts
        
        # Mapear caminhos para entidades
        entity_map = {
            'funcionarios': 'funcionarios',
            'cargos': 'cargos',
            'departamentos': 'departamentos',
            'salarios': 'salarios',
            'promocoes': 'promocoes',
            'presencas': 'presencas',
            'treinamentos': 'treinamentos',
            'avaliacoes': 'avaliacoes',
            'feriados': 'feriados',
            'transferencias': 'transferencias',
            'produtos': 'produtos',
            'materiais': 'materiais',
            'fornecedores': 'fornecedores',
            'categorias': 'categorias',
            'inventario': 'inventario',
            'requisicoes': 'requisicoes',
            'checklists': 'checklists',
            'viaturas': 'viaturas',
            'transportadoras': 'transportadoras',
            'operacoes': 'operacoes_logisticas',
            'transferencias': 'transferencias_logisticas',
            'ajustes': 'ajustes_inventario',
            'descontos': 'descontos_salario',
            'beneficios': 'beneficios_salario',
            'inscricoes': 'inscricoes_treinamento',
            'calendario': 'calendario_presencas',
            'etiquetas': 'etiquetas_pod',
            'stock': 'stock_sucursal_detail'
        }
        
        for part in path_parts:
            if part in entity_map:
                return entity_map[part]
        
        return None
    
    def _analyze_existing_filters(self):
        """Analisa filtros existentes nos templates"""
        logger.info("üîç Analisando filtros existentes...")
        
        for task in self.migration_tasks:
            try:
                with open(task.template_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                filters = self._extract_filters_from_content(content)
                task.current_filters = filters
                
                logger.info(f"üìä Filtros encontrados em {Path(task.template_path).name}: {len(filters)}")
                
            except Exception as e:
                logger.error(f"Erro ao analisar filtros em {task.template_path}: {e}")
                task.status = 'error'
                self.errors.append(f"Erro ao analisar {task.template_path}: {e}")
    
    def _extract_filters_from_content(self, content: str) -> List[Dict]:
        """Extrai informa√ß√µes dos filtros do conte√∫do do template"""
        filters = []
        
        # Extrair campos de pesquisa
        search_patterns = [
            r'<input[^>]*name\s*=\s*[\'"](q|search|filter)[\'"][^>]*>',
            r'<input[^>]*placeholder\s*=\s*[\'"]([^\'"]*pesquisar[^\'"]*)[\'"][^>]*>'
        ]
        
        for pattern in search_patterns:
            matches = re.findall(pattern, content, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple):
                    field_name, placeholder = match
                else:
                    field_name = match
                    placeholder = "Digite para pesquisar..."
                
                filters.append({
                    'type': 'search',
                    'field': field_name,
                    'placeholder': placeholder
                })
        
        # Extrair selects
        select_pattern = r'<select[^>]*name\s*=\s*[\'"]([^\'"]+)[\'"][^>]*>.*?</select>'
        select_matches = re.findall(select_pattern, content, re.DOTALL)
        
        for field_name in select_matches:
            filters.append({
                'type': 'select',
                'field': field_name,
                'placeholder': f"Todos os {field_name}s"
            })
        
        # Extrair campos de data
        date_pattern = r'<input[^>]*type\s*=\s*[\'"]date[\'"][^>]*name\s*=\s*[\'"]([^\'"]+)[\'"][^>]*>'
        date_matches = re.findall(date_pattern, content)
        
        for field_name in date_matches:
            filters.append({
                'type': 'date',
                'field': field_name,
                'placeholder': f"Selecionar {field_name}"
            })
        
        return filters
    
    def _create_filter_configurations(self):
        """Cria configura√ß√µes necess√°rias no filters_config.py"""
        logger.info("‚öôÔ∏è Criando configura√ß√µes de filtros...")
        
        # Ler arquivo atual ou criar novo
        if self.filters_config_file.exists():
            with open(self.filters_config_file, 'r', encoding='utf-8') as f:
                config_content = f.read()
        else:
            config_content = self._create_base_config_file()
        
        # Criar configura√ß√µes para cada entidade
        for task in self.migration_tasks:
            if task.status == 'error':
                continue
            
            config_name = f"{task.entity_name}_config"
            
            # Verificar se configura√ß√£o j√° existe
            if config_name in config_content:
                logger.info(f"‚úÖ Configura√ß√£o j√° existe para: {task.entity_name}")
                continue
            
            # Criar configura√ß√£o baseada nos filtros encontrados
            config_code = self._generate_filter_config(task)
            
            # Adicionar ao arquivo
            config_content += config_code
            
            logger.info(f"üìù Criada configura√ß√£o para: {task.entity_name}")
        
        # Salvar arquivo atualizado
        with open(self.filters_config_file, 'w', encoding='utf-8') as f:
            f.write(config_content)
        
        logger.info("üíæ Configura√ß√µes salvas em filters_config.py")
    
    def _create_base_config_file(self) -> str:
        """Cria arquivo base de configura√ß√£o"""
        return '''"""
SISTEMA UNIFICADO DE FILTROS DE BUSCA
Sistema oficial e √∫nico para todos os filtros do sistema
Substitui django-filters e sistemas antigos
"""

from django.db.models import Q
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum


class FilterType(Enum):
    """Tipos de filtros dispon√≠veis"""
    SEARCH = "search"
    SELECT = "select"
    DATE_RANGE = "date_range"
    BOOLEAN = "boolean"
    MULTI_SELECT = "multi_select"


@dataclass
class FilterConfig:
    """Configura√ß√£o de um filtro individual"""
    name: str
    label: str
    type: FilterType
    field: str
    placeholder: str = ""
    search_fields: List[str] = None
    choices: List[Tuple[str, str]] = None
    
    def __post_init__(self):
        if self.search_fields is None:
            self.search_fields = []
        if self.choices is None:
            self.choices = []


@dataclass
class FilterSetConfig:
    """Configura√ß√£o completa de um conjunto de filtros"""
    entity_name: str
    model_class: Any = None
    filters: List[FilterConfig] = None
    search_fields: List[str] = None
    default_order: str = "nome"
    pagination_size: int = 20
    
    def __post_init__(self):
        if self.filters is None:
            self.filters = []
        if self.search_fields is None:
            self.search_fields = []


class UnifiedFilterRegistry:
    """Registro centralizado de configura√ß√µes de filtros"""
    
    def __init__(self):
        self.configs: Dict[str, FilterSetConfig] = {}
        self._register_default_configs()
    
    def register(self, config: FilterSetConfig):
        """Registra uma nova configura√ß√£o"""
        self.configs[config.entity_name] = config
    
    def get(self, entity_name: str) -> Optional[FilterSetConfig]:
        """Obt√©m configura√ß√£o por nome da entidade"""
        return self.configs.get(entity_name)
    
    def _register_default_configs(self):
        """Registra configura√ß√µes padr√£o do sistema"""
        pass


# Inst√¢ncia global do registro
filter_registry = UnifiedFilterRegistry()


class FilterProcessor:
    """Processador de filtros com l√≥gica unificada"""
    
    def __init__(self, config: FilterSetConfig, queryset):
        self.config = config
        self.queryset = queryset
        self.applied_filters = {}
    
    def apply_filters(self, request_params: Dict[str, Any]) -> tuple:
        """
        Aplica todos os filtros aos par√¢metros da requisi√ß√£o
        
        Returns:
            tuple: (queryset_filtrado, contexto_para_template)
        """
        context = {}
        
        for filter_config in self.config.filters:
            value = request_params.get(filter_config.field, '').strip()
            
            if not value:
                context[filter_config.field] = ''
                continue
            
            if filter_config.type == FilterType.SEARCH:
                self._apply_search_filter(filter_config, value)
                context[filter_config.field] = value
                
            elif filter_config.type == FilterType.SELECT:
                self._apply_select_filter(filter_config, value)
                context[filter_config.field] = value
                
            elif filter_config.type == FilterType.DATE_RANGE:
                self._apply_date_range_filter(filter_config, value)
                context[filter_config.field] = value
                
            elif filter_config.type == FilterType.BOOLEAN:
                self._apply_boolean_filter(filter_config, value)
                context[filter_config.field] = value
                
            elif filter_config.type == FilterType.MULTI_SELECT:
                self._apply_multi_select_filter(filter_config, value)
                context[filter_config.field] = value
        
        # Aplicar ordena√ß√£o padr√£o
        self.queryset = self.queryset.order_by(self.config.default_order)
        
        return self.queryset, context
    
    def _apply_search_filter(self, filter_config: FilterConfig, value: str):
        """Aplica filtro de pesquisa"""
        if not filter_config.search_fields:
            return
        
        query = Q()
        for field in filter_config.search_fields:
            query |= Q(**{f"{field}__icontains": value})
        
        self.queryset = self.queryset.filter(query)
    
    def _apply_select_filter(self, filter_config: FilterConfig, value: str):
        """Aplica filtro de sele√ß√£o √∫nica"""
        if value:
            self.queryset = self.queryset.filter(**{filter_config.field: value})
    
    def _apply_date_range_filter(self, filter_config: FilterConfig, value: str):
        """Aplica filtro de intervalo de datas"""
        # Implementar l√≥gica de intervalo de datas
        pass
    
    def _apply_boolean_filter(self, filter_config: FilterConfig, value: str):
        """Aplica filtro booleano"""
        if value.lower() in ['true', '1', 'yes']:
            self.queryset = self.queryset.filter(**{filter_config.field: True})
        elif value.lower() in ['false', '0', 'no']:
            self.queryset = self.queryset.filter(**{filter_config.field: False})
    
    def _apply_multi_select_filter(self, filter_config: FilterConfig, value: str):
        """Aplica filtro de sele√ß√£o m√∫ltipla"""
        if value:
            values = [v.strip() for v in value.split(',') if v.strip()]
            if values:
                self.queryset = self.queryset.filter(**{f"{filter_config.field}__in": values})


def get_filter_config(entity_name: str) -> Optional[FilterSetConfig]:
    """Fun√ß√£o helper para obter configura√ß√£o de filtros"""
    return filter_registry.get(entity_name)

'''
    
    def _generate_filter_config(self, task: MigrationTask) -> str:
        """Gera c√≥digo de configura√ß√£o para uma entidade"""
        filters_code = []
        
        # Adicionar filtro de pesquisa se n√£o existir
        has_search = any(f['type'] == 'search' for f in task.current_filters)
        if not has_search:
            filters_code.append('''        FilterConfig(
            name="search",
            label="Pesquisar",
            type=FilterType.SEARCH,
            field="q",
            placeholder="Digite para pesquisar...",
            search_fields=["nome", "codigo"]
        )''')
        
        # Adicionar filtros encontrados
        for filter_info in task.current_filters:
            if filter_info['type'] == 'search':
                filters_code.append(f'''        FilterConfig(
            name="{filter_info['field']}",
            label="Pesquisar",
            type=FilterType.SEARCH,
            field="{filter_info['field']}",
            placeholder="{filter_info['placeholder']}",
            search_fields=["nome", "codigo"]
        )''')
            elif filter_info['type'] == 'select':
                filters_code.append(f'''        FilterConfig(
            name="{filter_info['field']}",
            label="{filter_info['field'].title()}",
            type=FilterType.SELECT,
            field="{filter_info['field']}",
            placeholder="{filter_info['placeholder']}"
        )''')
            elif filter_info['type'] == 'date':
                filters_code.append(f'''        FilterConfig(
            name="{filter_info['field']}",
            label="{filter_info['field'].replace('_', ' ').title()}",
            type=FilterType.DATE_RANGE,
            field="{filter_info['field']}",
            placeholder="{filter_info['placeholder']}"
        )''')
        
        config_code = f'''
# Configura√ß√£o para {task.entity_name}
{task.entity_name}_config = FilterSetConfig(
    entity_name="{task.entity_name}",
    filters=[
{','.join(filters_code)}
    ],
    search_fields=["nome", "codigo"],
    default_order="nome",
    pagination_size=20
)

filter_registry.register({task.entity_name}_config)
'''
        
        return config_code
    
    def _migrate_templates(self):
        """Migra templates para o sistema unificado"""
        logger.info("üîÑ Migrando templates...")
        
        for task in self.migration_tasks:
            if task.status == 'error':
                continue
            
            try:
                task.status = 'in_progress'
                
                with open(task.template_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Remover filtros antigos
                content = self._remove_old_filters(content)
                
                # Adicionar sistema unificado
                content = self._add_unified_filters(content, task.entity_name)
                
                # Remover CSS e JavaScript inline
                content = self._remove_inline_code(content)
                
                # Salvar template atualizado
                with open(task.template_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                task.status = 'completed'
                self.migrations_completed.append(task.template_path)
                
                logger.info(f"‚úÖ Migrado: {Path(task.template_path).name}")
                
            except Exception as e:
                logger.error(f"Erro ao migrar {task.template_path}: {e}")
                task.status = 'error'
                self.errors.append(f"Erro ao migrar {task.template_path}: {e}")
    
    def _remove_old_filters(self, content: str) -> str:
        """Remove filtros antigos do template"""
        # Remover formul√°rios de filtro
        form_pattern = r'<form[^>]*method\s*=\s*[\'"]get[\'"][^>]*>.*?</form>'
        content = re.sub(form_pattern, '', content, flags=re.DOTALL)
        
        # Remover elementos de filtro soltos
        filter_patterns = [
            r'<input[^>]*name\s*=\s*[\'"](q|search|filter)[\'"][^>]*>',
            r'<select[^>]*name\s*=\s*[\'"](status|departamento|cargo|tipo|sucursal)[\'"][^>]*>.*?</select>',
            r'<button[^>]*type\s*=\s*[\'"]submit[\'"][^>]*>.*?</button>'
        ]
        
        for pattern in filter_patterns:
            content = re.sub(pattern, '', content, flags=re.DOTALL)
        
        return content
    
    def _add_unified_filters(self, content: str, entity_name: str) -> str:
        """Adiciona sistema unificado de filtros"""
        # Encontrar local apropriado para inserir filtros
        # Geralmente ap√≥s o header ou antes da tabela
        
        # Procurar por padr√µes comuns
        insertion_patterns = [
            r'(<div[^>]*class\s*=\s*[\'"][^\'"]*header[^\'"]*[\'"][^>]*>.*?</div>)',
            r'(<h[1-6][^>]*>.*?</h[1-6]>)',
            r'(<div[^>]*class\s*=\s*[\'"][^\'"]*content[^\'"]*[\'"][^>]*>)',
            r'(<table[^>]*>)'
        ]
        
        unified_filter_code = f'''
    {{% include 'includes/filters_unified.html' with entity_name='{entity_name}' %}}
'''
        
        for pattern in insertion_patterns:
            match = re.search(pattern, content, re.DOTALL)
            if match:
                # Inserir ap√≥s o match
                insertion_point = match.end()
                content = content[:insertion_point] + unified_filter_code + content[insertion_point:]
                break
        else:
            # Se n√£o encontrar padr√£o, inserir no in√≠cio do body
            body_match = re.search(r'(<body[^>]*>)', content)
            if body_match:
                insertion_point = body_match.end()
                content = content[:insertion_point] + unified_filter_code + content[insertion_point:]
        
        return content
    
    def _remove_inline_code(self, content: str) -> str:
        """Remove CSS e JavaScript inline"""
        # Remover blocos de estilo
        style_pattern = r'<style[^>]*>.*?</style>'
        content = re.sub(style_pattern, '', content, flags=re.DOTALL)
        
        # Remover blocos de script (exceto os necess√°rios)
        script_pattern = r'<script[^>]*>(?!.*filters_unified).*?</script>'
        content = re.sub(script_pattern, '', content, flags=re.DOTALL)
        
        return content
    
    def _validate_migrations(self):
        """Valida migra√ß√µes realizadas"""
        logger.info("‚úÖ Validando migra√ß√µes...")
        
        for task in self.migration_tasks:
            if task.status != 'completed':
                continue
            
            try:
                with open(task.template_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Verificar se tem sistema unificado
                if 'filters_unified.html' not in content:
                    logger.warning(f"‚ö†Ô∏è Sistema unificado n√£o encontrado em {task.template_path}")
                    task.status = 'error'
                
                # Verificar se n√£o tem filtros antigos
                if re.search(r'<form[^>]*method\s*=\s*[\'"]get[\'"]', content):
                    logger.warning(f"‚ö†Ô∏è Filtros antigos ainda presentes em {task.template_path}")
                
                logger.info(f"‚úÖ Valida√ß√£o OK: {Path(task.template_path).name}")
                
            except Exception as e:
                logger.error(f"Erro ao validar {task.template_path}: {e}")
    
    def _generate_migration_report(self) -> Dict:
        """Gera relat√≥rio da migra√ß√£o"""
        logger.info("üìä Gerando relat√≥rio de migra√ß√£o...")
        
        completed_tasks = [t for t in self.migration_tasks if t.status == 'completed']
        error_tasks = [t for t in self.migration_tasks if t.status == 'error']
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_tasks': len(self.migration_tasks),
                'completed': len(completed_tasks),
                'errors': len(error_tasks),
                'success_rate': len(completed_tasks) / len(self.migration_tasks) * 100 if self.migration_tasks else 0
            },
            'completed_migrations': [
                {
                    'template_path': task.template_path,
                    'entity_name': task.entity_name,
                    'filters_migrated': len(task.current_filters)
                }
                for task in completed_tasks
            ],
            'errors': self.errors,
            'recommendations': self._generate_migration_recommendations()
        }
        
        return report
    
    def _generate_migration_recommendations(self) -> List[str]:
        """Gera recomenda√ß√µes baseadas na migra√ß√£o"""
        recommendations = []
        
        if len(self.migration_tasks) == 0:
            recommendations.append("‚úÖ Nenhuma migra√ß√£o necess√°ria - todos os filtros j√° est√£o atualizados!")
            return recommendations
        
        completed = len([t for t in self.migration_tasks if t.status == 'completed'])
        errors = len([t for t in self.migration_tasks if t.status == 'error'])
        
        if completed > 0:
            recommendations.append(f"‚úÖ {completed} templates migrados com sucesso")
        
        if errors > 0:
            recommendations.append(f"‚ö†Ô∏è {errors} templates com problemas - revisar manualmente")
        
        recommendations.append("üß™ Testar funcionalidade de filtros em todos os templates migrados")
        recommendations.append("üìö Atualizar documenta√ß√£o com novas configura√ß√µes")
        recommendations.append("üîÑ Executar script de verifica√ß√£o para validar migra√ß√µes")
        
        return recommendations

def main():
    """Fun√ß√£o principal do script"""
    print("üöÄ SCRIPT DE MIGRA√á√ÉO E CORRE√á√ÉO AUTOM√ÅTICA DE FILTROS")
    print("=" * 60)
    
    # Obter diret√≥rio do projeto
    project_root = os.getcwd()
    logger.info(f"Diret√≥rio do projeto: {project_root}")
    
    # Executar migra√ß√£o
    migrator = FilterMigrator(project_root)
    report = migrator.run_full_migration()
    
    # Exibir resumo
    print("\nüìä RESUMO DA MIGRA√á√ÉO:")
    print(f"Total de tarefas: {report['summary']['total_tasks']}")
    print(f"Migra√ß√µes conclu√≠das: {report['summary']['completed']}")
    print(f"Erros: {report['summary']['errors']}")
    print(f"Taxa de sucesso: {report['summary']['success_rate']:.1f}%")
    
    # Exibir migra√ß√µes conclu√≠das
    if report['completed_migrations']:
        print("\n‚úÖ MIGRA√á√ïES CONCLU√çDAS:")
        for migration in report['completed_migrations']:
            template_name = Path(migration['template_path']).name
            print(f"  - {template_name} ({migration['entity_name']}) - {migration['filters_migrated']} filtros")
    
    # Exibir erros
    if report['errors']:
        print("\n‚ùå ERROS ENCONTRADOS:")
        for error in report['errors']:
            print(f"  - {error}")
    
    # Exibir recomenda√ß√µes
    print("\nüí° RECOMENDA√á√ïES:")
    for recommendation in report['recommendations']:
        print(f"  {recommendation}")
    
    # Salvar relat√≥rio
    report_file = 'relatorio_migracao_filtros.json'
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ Relat√≥rio salvo em: {report_file}")
    print("‚úÖ Migra√ß√£o conclu√≠da!")

if __name__ == "__main__":
    main()
