from django.core.management.base import BaseCommand
from meuprojeto.empresa.models_rh import Funcionario, FuncionarioFolha, FolhaSalarial
from datetime import date
import calendar

class Command(BaseCommand):
    help = 'Demonstra como o desconto por faltas considera o sal√°rio di√°rio'

    def handle(self, *args, **options):
        self.stdout.write('=' * 70)
        self.stdout.write('üí∞ AN√ÅLISE: DESCONTO POR FALTAS BASEADO NO SAL√ÅRIO DI√ÅRIO')
        self.stdout.write('=' * 70)
        self.stdout.write('')
        
        # Buscar funcion√°rio
        funcionario = Funcionario.objects.filter(status='AT').first()
        if not funcionario:
            self.stdout.write('‚ùå Nenhum funcion√°rio ativo encontrado')
            return
        
        self.stdout.write(f'üë§ FUNCION√ÅRIO: {funcionario.nome_completo}')
        self.stdout.write(f'üí∞ Sal√°rio Base: {funcionario.salario_atual} MT')
        self.stdout.write('')
        
        # Analisar diferentes cen√°rios
        cenarios = [
            {'mes': 2, 'ano': 2025, 'faltas': 1, 'nome': 'Fevereiro (28 dias)'},
            {'mes': 4, 'ano': 2025, 'faltas': 2, 'nome': 'Abril (30 dias)'},
            {'mes': 1, 'ano': 2025, 'faltas': 3, 'nome': 'Janeiro (31 dias)'},
            {'mes': 9, 'ano': 2025, 'faltas': 1, 'nome': 'Setembro (30 dias)'},
        ]
        
        self.stdout.write('üìä C√ÅLCULO DO SAL√ÅRIO DI√ÅRIO E DESCONTO:')
        self.stdout.write('')
        
        for cenario in cenarios:
            dias_uteis = self.calcular_dias_uteis_mes(cenario['ano'], cenario['mes'])
            dias_totais = calendar.monthrange(cenario['ano'], cenario['mes'])[1]
            
            # Calcular sal√°rio di√°rio
            salario_float = float(funcionario.salario_atual)
            salario_diario = salario_float / dias_uteis if dias_uteis > 0 else 0
            
            # Calcular desconto
            desconto_total = salario_diario * cenario['faltas']
            salario_final = salario_float - desconto_total
            
            self.stdout.write(f'üìÖ {cenario["nome"]}:')
            self.stdout.write(f'   ‚Ä¢ Dias totais: {dias_totais}')
            self.stdout.write(f'   ‚Ä¢ Dias √∫teis: {dias_uteis}')
            self.stdout.write(f'   ‚Ä¢ Sal√°rio di√°rio: {salario_diario:.2f} MT')
            self.stdout.write(f'   ‚Ä¢ Faltas: {cenario["faltas"]}')
            self.stdout.write(f'   ‚Ä¢ Desconto total: {desconto_total:.2f} MT')
            self.stdout.write(f'   ‚Ä¢ Sal√°rio final: {salario_final:.2f} MT')
            self.stdout.write('')
        
        # Verificar implementa√ß√£o atual
        self.stdout.write('üîç IMPLEMENTA√á√ÉO ATUAL:')
        self.stdout.write('')
        self.stdout.write('‚úÖ F√ìRMULA UTILIZADA:')
        self.stdout.write('   valor_por_dia = sal√°rio_base / dias_uteis_mes')
        self.stdout.write('   desconto_total = valor_por_dia √ó n√∫mero_de_faltas')
        self.stdout.write('')
        
        self.stdout.write('‚úÖ CARACTER√çSTICAS:')
        self.stdout.write('   ‚Ä¢ Considera dias √∫teis espec√≠ficos do m√™s')
        self.stdout.write('   ‚Ä¢ Calcula sal√°rio di√°rio proporcional')
        self.stdout.write('   ‚Ä¢ Desconto baseado no valor di√°rio real')
        self.stdout.write('   ‚Ä¢ Ajusta automaticamente para meses diferentes')
        self.stdout.write('')
        
        # Exemplo pr√°tico
        self.stdout.write('üí° EXEMPLO PR√ÅTICO:')
        self.stdout.write('   Funcion√°rio com sal√°rio de 116,160.00 MT:')
        self.stdout.write('   ‚Ä¢ Setembro: 22 dias √∫teis ‚Üí 5,280.00 MT/dia')
        self.stdout.write('   ‚Ä¢ 1 falta = desconto de 5,280.00 MT')
        self.stdout.write('   ‚Ä¢ 2 faltas = desconto de 10,560.00 MT')
        self.stdout.write('   ‚Ä¢ 3 faltas = desconto de 15,840.00 MT')
        self.stdout.write('')
        
        # Verificar se h√° folhas existentes
        folha = FolhaSalarial.objects.filter(mes_referencia__year=2025, mes_referencia__month=9).first()
        if folha:
            funcionario_folha = FuncionarioFolha.objects.filter(folha=folha, funcionario=funcionario).first()
            if funcionario_folha:
                self.stdout.write('üìã FOLHA ATUAL (Setembro 2025):')
                dias_uteis = funcionario_folha.calcular_dias_uteis_mes()
                salario_diario = float(funcionario_folha.salario_base) / dias_uteis if dias_uteis > 0 else 0
                
                self.stdout.write(f'   ‚Ä¢ Dias √∫teis: {dias_uteis}')
                self.stdout.write(f'   ‚Ä¢ Sal√°rio di√°rio: {salario_diario:.2f} MT')
                self.stdout.write(f'   ‚Ä¢ Desconto por faltas: {funcionario_folha.desconto_faltas} MT')
                self.stdout.write(f'   ‚Ä¢ Sal√°rio l√≠quido: {funcionario_folha.salario_liquido} MT')
                self.stdout.write('')
        
        self.stdout.write('üéØ CONCLUS√ÉO:')
        self.stdout.write('')
        self.stdout.write('‚úÖ SIM, O DESCONTO CONSIDERA O SAL√ÅRIO DI√ÅRIO!')
        self.stdout.write('   ‚Ä¢ Calcula valor por dia baseado nos dias √∫teis')
        self.stdout.write('   ‚Ä¢ Aplica desconto proporcional ao n√∫mero de faltas')
        self.stdout.write('   ‚Ä¢ Ajusta automaticamente para diferentes meses')
        self.stdout.write('   ‚Ä¢ Sistema justo e proporcional')
        self.stdout.write('')
        self.stdout.write('üöÄ IMPLEMENTA√á√ÉO CORRETA E INTELIGENTE!')
    
    def calcular_dias_uteis_mes(self, ano, mes):
        """Calcula dias √∫teis de um m√™s espec√≠fico"""
        from datetime import timedelta
        import calendar
        
        # Obter primeiro e √∫ltimo dia do m√™s
        primeiro_dia = date(ano, mes, 1)
        ultimo_dia = calendar.monthrange(ano, mes)[1]
        ultimo_dia = date(ano, mes, ultimo_dia)
        
        # Contar dias √∫teis (segunda a sexta)
        dias_uteis = 0
        data_atual = primeiro_dia
        
        while data_atual <= ultimo_dia:
            # 0 = segunda, 6 = domingo
            if data_atual.weekday() < 5:  # Segunda a sexta
                dias_uteis += 1
            data_atual += timedelta(days=1)
        
        return dias_uteis
