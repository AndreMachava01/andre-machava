from django.core.management.base import BaseCommand
from meuprojeto.empresa.models_rh import Funcionario, FolhaSalarial, FuncionarioFolha, Presenca, TipoPresenca
from datetime import date, timedelta

class Command(BaseCommand):
    help = 'Demonstra o sistema completo de desconto por faltas'

    def handle(self, *args, **options):
        self.stdout.write('=' * 60)
        self.stdout.write('üéØ SISTEMA DE DESCONTO POR FALTAS - IMPLEMENTADO')
        self.stdout.write('=' * 60)
        self.stdout.write('')
        
        # Buscar funcion√°rio e folha
        funcionario = Funcionario.objects.filter(status='AT').first()
        folha = FolhaSalarial.objects.filter(mes_referencia__year=2025, mes_referencia__month=9).first()
        
        if not funcionario or not folha:
            self.stdout.write('‚ùå Dados n√£o encontrados')
            return
        
        funcionario_folha = FuncionarioFolha.objects.filter(folha=folha, funcionario=funcionario).first()
        
        if not funcionario_folha:
            self.stdout.write('‚ùå Funcion√°rio n√£o encontrado na folha')
            return
        
        self.stdout.write('üìã DADOS DO FUNCION√ÅRIO:')
        self.stdout.write(f'   ‚Ä¢ Nome: {funcionario.nome_completo}')
        self.stdout.write(f'   ‚Ä¢ Sal√°rio Base: {funcionario_folha.salario_base} MT')
        self.stdout.write(f'   ‚Ä¢ M√™s: {folha.mes_referencia.strftime("%B/%Y")}')
        self.stdout.write('')
        
        # Mostrar tipos de presen√ßa que descontam
        tipos_desconta = TipoPresenca.objects.filter(desconta_salario=True)
        self.stdout.write('üîç TIPOS DE PRESEN√áA QUE DESCONTAM SAL√ÅRIO:')
        for tipo in tipos_desconta:
            self.stdout.write(f'   ‚Ä¢ {tipo.nome} ({tipo.codigo}) - {tipo.descricao}')
        self.stdout.write('')
        
        # Mostrar presen√ßas do m√™s
        primeiro_dia = folha.mes_referencia.replace(day=1)
        ultimo_dia = (primeiro_dia + timedelta(days=32)).replace(day=1) - timedelta(days=1)
        
        presencas_faltas = Presenca.objects.filter(
            funcionario=funcionario,
            data__gte=primeiro_dia,
            data__lte=ultimo_dia,
            tipo_presenca__desconta_salario=True
        )
        
        self.stdout.write('üìÖ AN√ÅLISE DO M√äS:')
        self.stdout.write(f'   ‚Ä¢ Per√≠odo: {primeiro_dia.strftime("%d/%m/%Y")} a {ultimo_dia.strftime("%d/%m/%Y")}')
        self.stdout.write(f'   ‚Ä¢ Dias √∫teis: {funcionario_folha.calcular_dias_uteis_mes()}')
        self.stdout.write(f'   ‚Ä¢ Faltas registradas: {presencas_faltas.count()}')
        
        if presencas_faltas.count() > 0:
            self.stdout.write('   ‚Ä¢ Detalhes das faltas:')
            for presenca in presencas_faltas:
                self.stdout.write(f'     - {presenca.data.strftime("%d/%m/%Y")} - {presenca.tipo_presenca.nome}')
        self.stdout.write('')
        
        # Mostrar c√°lculo
        dias_uteis = funcionario_folha.calcular_dias_uteis_mes()
        valor_por_dia = float(funcionario_folha.salario_base) / dias_uteis
        desconto_calculado = valor_por_dia * presencas_faltas.count()
        
        self.stdout.write('üßÆ C√ÅLCULO DO DESCONTO:')
        self.stdout.write(f'   ‚Ä¢ F√≥rmula: (Sal√°rio Base √∑ Dias √öteis) √ó N√∫mero de Faltas')
        self.stdout.write(f'   ‚Ä¢ C√°lculo: ({funcionario_folha.salario_base} √∑ {dias_uteis}) √ó {presencas_faltas.count()}')
        self.stdout.write(f'   ‚Ä¢ Valor por dia: {valor_por_dia:.2f} MT')
        self.stdout.write(f'   ‚Ä¢ Desconto total: {desconto_calculado:.2f} MT')
        self.stdout.write('')
        
        # Mostrar resultado final
        self.stdout.write('üí∞ RESULTADO FINAL:')
        self.stdout.write(f'   ‚Ä¢ Sal√°rio Base: {funcionario_folha.salario_base} MT')
        self.stdout.write(f'   ‚Ä¢ Total Benef√≠cios: {funcionario_folha.total_beneficios} MT')
        self.stdout.write(f'   ‚Ä¢ Total Descontos: {funcionario_folha.total_descontos} MT')
        self.stdout.write(f'   ‚Ä¢ Desconto por Faltas: {funcionario_folha.desconto_faltas} MT')
        self.stdout.write(f'   ‚Ä¢ Sal√°rio Bruto: {funcionario_folha.salario_bruto} MT')
        self.stdout.write(f'   ‚Ä¢ Sal√°rio L√≠quido: {funcionario_folha.salario_liquido} MT')
        self.stdout.write('')
        
        # Verificar se est√° funcionando
        if funcionario_folha.desconto_faltas > 0:
            self.stdout.write('‚úÖ SISTEMA FUNCIONANDO PERFEITAMENTE!')
            self.stdout.write('   ‚Ä¢ Desconto autom√°tico aplicado')
            self.stdout.write('   ‚Ä¢ C√°lculo correto')
            self.stdout.write('   ‚Ä¢ Integra√ß√£o com folha salarial')
        else:
            self.stdout.write('‚ÑπÔ∏è  NENHUM DESCONTO APLICADO')
            self.stdout.write('   ‚Ä¢ Funcion√°rio n√£o faltou no m√™s')
            self.stdout.write('   ‚Ä¢ Sistema pronto para funcionar')
        
        self.stdout.write('')
        self.stdout.write('üéØ FUNCIONALIDADES IMPLEMENTADAS:')
        self.stdout.write('   ‚úÖ C√°lculo autom√°tico de desconto por faltas')
        self.stdout.write('   ‚úÖ Baseado em tipos de presen√ßa configur√°veis')
        self.stdout.write('   ‚úÖ F√≥rmula: (Sal√°rio Base √∑ Dias √öteis) √ó Faltas')
        self.stdout.write('   ‚úÖ Integra√ß√£o com c√°lculo de sal√°rio')
        self.stdout.write('   ‚úÖ Exibi√ß√£o na folha salarial')
        self.stdout.write('   ‚úÖ Campo dedicado para desconto por faltas')
        self.stdout.write('   ‚úÖ Suporte a diferentes tipos de falta')
        self.stdout.write('')
        self.stdout.write('üöÄ SISTEMA COMPLETO E OPERACIONAL!')
