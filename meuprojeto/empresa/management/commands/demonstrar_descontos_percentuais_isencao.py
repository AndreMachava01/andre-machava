from django.core.management.base import BaseCommand
from meuprojeto.empresa.models_rh import (
    FolhaSalarial, Funcionario, FuncionarioFolha, 
    DescontoSalarial, DescontoFolha
)
from decimal import Decimal

class Command(BaseCommand):
    help = 'Demonstra o sistema de descontos percentuais e isen√ß√µes'

    def handle(self, *args, **options):
        self.stdout.write('=' * 80)
        self.stdout.write('üí∞ DEMONSTRA√á√ÉO: DESCONTOS PERCENTUAIS E ISEN√á√ïES')
        self.stdout.write('=' * 80)
        self.stdout.write('')
        
        # 1. Configurar descontos autom√°ticos
        self.stdout.write('1Ô∏è‚É£ CONFIGURANDO DESCONTOS AUTOM√ÅTICOS:')
        self.stdout.write('')
        
        # INSS - 3% fixo, sem isen√ß√£o
        inss, created = DescontoSalarial.objects.get_or_create(
            codigo='IN001',
            defaults={
                'nome': 'INSS Mo√ßambique',
                'tipo': 'IN',
                'tipo_valor': 'PERCENTUAL',
                'valor': 3.00,  # 3%
                'base_calculo': 'SALARIO_BRUTO',
                'valor_minimo_isencao': 0.00,  # Sem isen√ß√£o
                'aplicar_automaticamente': True,
                'ativo': True,
                'observacoes': 'Contribui√ß√£o para a Seguran√ßa Social - 3% sobre sal√°rio bruto'
            }
        )
        
        if created:
            self.stdout.write(f'   ‚úÖ INSS criado: {inss.nome}')
        else:
            self.stdout.write(f'   ‚ÑπÔ∏è  INSS j√° existe: {inss.nome}')
        
        # IRPS - 5% sobre sal√°rio bruto, isento at√© 19.000 MT
        irps, created = DescontoSalarial.objects.get_or_create(
            codigo='IR001',
            defaults={
                'nome': 'IRPS (Imposto de Renda)',
                'tipo': 'IR',
                'tipo_valor': 'PERCENTUAL',
                'valor': 5.00,  # 5%
                'base_calculo': 'SALARIO_BRUTO',
                'valor_minimo_isencao': 19000.00,  # Isento at√© 19.000 MT
                'aplicar_automaticamente': True,
                'ativo': True,
                'observacoes': 'Imposto de Renda sobre Pessoas Singulares - 5% sobre sal√°rio bruto, isento at√© 19.000 MT'
            }
        )
        
        if created:
            self.stdout.write(f'   ‚úÖ IRPS criado: {irps.nome}')
        else:
            self.stdout.write(f'   ‚ÑπÔ∏è  IRPS j√° existe: {irps.nome}')
        
        # Desconto adicional - 2% sobre sal√°rio base, isento at√© 15.000 MT
        desconto_adicional, created = DescontoSalarial.objects.get_or_create(
            codigo='AD001',
            defaults={
                'nome': 'Desconto Adicional',
                'tipo': 'OU',
                'tipo_valor': 'PERCENTUAL',
                'valor': 2.00,  # 2%
                'base_calculo': 'SALARIO_BASE',
                'valor_minimo_isencao': 15000.00,  # Isento at√© 15.000 MT
                'aplicar_automaticamente': True,
                'ativo': True,
                'observacoes': 'Desconto adicional - 2% sobre sal√°rio base, isento at√© 15.000 MT'
            }
        )
        
        if created:
            self.stdout.write(f'   ‚úÖ Desconto Adicional criado: {desconto_adicional.nome}')
        else:
            self.stdout.write(f'   ‚ÑπÔ∏è  Desconto Adicional j√° existe: {desconto_adicional.nome}')
        
        self.stdout.write('')
        
        # 2. Mostrar descontos configurados
        self.stdout.write('2Ô∏è‚É£ DESCONTOS CONFIGURADOS:')
        descontos = DescontoSalarial.objects.filter(ativo=True, aplicar_automaticamente=True)
        
        for desconto in descontos:
            self.stdout.write(f'   üí∏ {desconto.nome} ({desconto.codigo})')
            self.stdout.write(f'      ‚Ä¢ Tipo: {desconto.get_tipo_display()}')
            self.stdout.write(f'      ‚Ä¢ Valor: {desconto.valor}% (percentual)')
            self.stdout.write(f'      ‚Ä¢ Base: {desconto.get_base_calculo_display()}')
            self.stdout.write(f'      ‚Ä¢ Isen√ß√£o: {desconto.get_descricao_isencao()}')
            self.stdout.write('')
        
        # 3. Buscar folha de setembro
        folha = FolhaSalarial.objects.filter(mes_referencia__year=2025, mes_referencia__month=9).first()
        
        if not folha:
            self.stdout.write('‚ùå Folha de setembro n√£o encontrada')
            return
        
        self.stdout.write('3Ô∏è‚É£ FUNCION√ÅRIOS NA FOLHA:')
        funcionarios_folha = folha.funcionarios_folha.all().order_by('funcionario__nome_completo')
        
        for func_folha in funcionarios_folha:
            self.stdout.write(f'   üë§ {func_folha.funcionario.nome_completo}:')
            self.stdout.write(f'      ‚Ä¢ Sal√°rio Base: {func_folha.salario_base} MT')
            self.stdout.write(f'      ‚Ä¢ Sal√°rio Bruto: {func_folha.salario_bruto} MT')
            self.stdout.write('')
        
        # 4. Demonstrar c√°lculo de descontos para diferentes sal√°rios
        self.stdout.write('4Ô∏è‚É£ DEMONSTRA√á√ÉO DE C√ÅLCULO DE DESCONTOS:')
        self.stdout.write('')
        
        # Testar com diferentes valores de sal√°rio
        valores_teste = [10000, 15000, 19000, 25000, 50000]
        
        for salario_bruto in valores_teste:
            self.stdout.write(f'   üí∞ SAL√ÅRIO BRUTO: {salario_bruto} MT')
            self.stdout.write('   ' + '-' * 50)
            
            total_descontos = Decimal('0.00')
            
            for desconto in descontos:
                # Calcular valor do desconto
                valor_desconto = desconto.calcular_valor_desconto(
                    salario_bruto,  # Usando sal√°rio bruto como base
                    salario_bruto,
                    salario_bruto
                )
                
                deve_aplicar = desconto.deve_aplicar_desconto(salario_bruto)
                
                if deve_aplicar and valor_desconto > 0:
                    self.stdout.write(f'      ‚úÖ {desconto.nome}: {valor_desconto} MT')
                    total_descontos += valor_desconto
                else:
                    self.stdout.write(f'      ‚ùå {desconto.nome}: ISENTO ({desconto.get_descricao_isencao()})')
            
            salario_liquido = salario_bruto - total_descontos
            self.stdout.write(f'      üí∏ Total Descontos: {total_descontos} MT')
            self.stdout.write(f'      üíµ Sal√°rio L√≠quido: {salario_liquido} MT')
            self.stdout.write('')
        
        # 5. Aplicar descontos autom√°ticos na folha
        self.stdout.write('5Ô∏è‚É£ APLICANDO DESCONTOS AUTOM√ÅTICOS NA FOLHA:')
        self.stdout.write('')
        
        for func_folha in funcionarios_folha:
            self.stdout.write(f'   üë§ {func_folha.funcionario.nome_completo}:')
            
            # Recalcular sal√°rio para aplicar descontos autom√°ticos
            func_folha.calcular_salario()
            
            # Buscar descontos aplicados
            descontos_aplicados = DescontoFolha.objects.filter(funcionario_folha=func_folha)
            
            if descontos_aplicados.exists():
                for desconto_folha in descontos_aplicados:
                    self.stdout.write(f'      üí∏ {desconto_folha.desconto.nome}: {desconto_folha.valor} MT')
                    if 'autom√°tico' in desconto_folha.observacoes:
                        self.stdout.write(f'         (Aplicado automaticamente)')
            else:
                self.stdout.write(f'      ‚ÑπÔ∏è  Nenhum desconto aplicado')
            
            self.stdout.write(f'      üíµ Sal√°rio L√≠quido: {func_folha.salario_liquido} MT')
            self.stdout.write('')
        
        # 6. Recalcular totais da folha
        self.stdout.write('6Ô∏è‚É£ RECALCULANDO TOTAIS DA FOLHA:')
        folha.calcular_totais()
        
        self.stdout.write(f'   ‚Ä¢ Total Bruto: {folha.total_bruto} MT')
        self.stdout.write(f'   ‚Ä¢ Total Descontos: {folha.total_descontos} MT')
        self.stdout.write(f'   ‚Ä¢ Total L√≠quido: {folha.total_liquido} MT')
        self.stdout.write('')
        
        # 7. Resumo das regras implementadas
        self.stdout.write('7Ô∏è‚É£ RESUMO DAS REGRAS IMPLEMENTADAS:')
        self.stdout.write('')
        
        self.stdout.write('   üìã DESCONTOS AUTOM√ÅTICOS:')
        self.stdout.write('      ‚Ä¢ INSS: 3% sobre sal√°rio bruto (sem isen√ß√£o)')
        self.stdout.write('      ‚Ä¢ IRPS: 5% sobre sal√°rio bruto (isento at√© 19.000 MT)')
        self.stdout.write('      ‚Ä¢ Desconto Adicional: 2% sobre sal√°rio base (isento at√© 15.000 MT)')
        self.stdout.write('')
        
        self.stdout.write('   üîÑ FLUXO AUTOM√ÅTICO:')
        self.stdout.write('      1. FuncionarioFolha.calcular_salario() √© chamado')
        self.stdout.write('      2. Sal√°rio bruto √© calculado (base + benef√≠cios)')
        self.stdout.write('      3. Descontos autom√°ticos s√£o aplicados baseados nas regras')
        self.stdout.write('      4. Verifica√ß√£o de isen√ß√µes √© feita automaticamente')
        self.stdout.write('      5. Descontos s√£o criados na tabela DescontoFolha')
        self.stdout.write('      6. Sal√°rio l√≠quido √© calculado')
        self.stdout.write('')
        
        self.stdout.write('   ‚öôÔ∏è CONFIGURA√á√ÉO:')
        self.stdout.write('      ‚Ä¢ Acesse: /admin/empresa/descontosalarial/')
        self.stdout.write('      ‚Ä¢ Marque "Aplicar Automaticamente" para descontos autom√°ticos')
        self.stdout.write('      ‚Ä¢ Configure "Valor M√≠nimo para Isen√ß√£o" para regras de isen√ß√£o')
        self.stdout.write('      ‚Ä¢ Use "Base de C√°lculo" para definir sobre o que calcular')
        self.stdout.write('')
        
        self.stdout.write('üéâ SISTEMA DE DESCONTOS PERCENTUAIS E ISEN√á√ïES FUNCIONANDO!')
        self.stdout.write('')
        self.stdout.write('‚úÖ O sistema permite:')
        self.stdout.write('   ‚Ä¢ Descontos percentuais autom√°ticos')
        self.stdout.write('   ‚Ä¢ Regras de isen√ß√£o por faixa salarial')
        self.stdout.write('   ‚Ä¢ Diferentes bases de c√°lculo')
        self.stdout.write('   ‚Ä¢ Aplica√ß√£o autom√°tica na folha')
        self.stdout.write('   ‚Ä¢ C√°lculo correto do IRPS para sal√°rios acima de 19.000 MT')
