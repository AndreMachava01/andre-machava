from django.core.management.base import BaseCommand
from meuprojeto.empresa.models_rh import Funcionario, FolhaSalarial, FuncionarioFolha, Presenca, TipoPresenca
from datetime import date, timedelta

class Command(BaseCommand):
    help = 'Simula faltas para demonstrar o desconto autom√°tico'

    def handle(self, *args, **options):
        self.stdout.write('=== SIMULA√á√ÉO DE FALTAS E DESCONTO AUTOM√ÅTICO ===')
        self.stdout.write('')
        
        # Buscar funcion√°rio e folha
        funcionario = Funcionario.objects.filter(status='AT').first()
        folha = FolhaSalarial.objects.filter(mes_referencia__year=2025, mes_referencia__month=9).first()
        
        if not funcionario or not folha:
            self.stdout.write('‚ùå Funcion√°rio ou folha n√£o encontrados')
            return
        
        funcionario_folha = FuncionarioFolha.objects.filter(folha=folha, funcionario=funcionario).first()
        
        if not funcionario_folha:
            self.stdout.write('‚ùå Funcion√°rio n√£o encontrado na folha')
            return
        
        self.stdout.write(f'üìã FUNCION√ÅRIO: {funcionario.nome_completo}')
        self.stdout.write(f'üí∞ Sal√°rio Base: {funcionario_folha.salario_base} MT')
        self.stdout.write('')
        
        # Buscar tipo de presen√ßa "Falta Injustificada"
        tipo_falta = TipoPresenca.objects.filter(codigo='FI').first()
        if not tipo_falta:
            self.stdout.write('‚ùå Tipo de presen√ßa "Falta Injustificada" n√£o encontrado')
            return
        
        # Simular 2 faltas no m√™s
        self.stdout.write('üîß SIMULANDO 2 FALTAS NO M√äS:')
        
        # Datas de falta (dias √∫teis)
        data_falta1 = date(2025, 9, 3)  # Ter√ßa-feira
        data_falta2 = date(2025, 9, 10)  # Ter√ßa-feira
        
        # Criar presen√ßas de falta
        falta1, created1 = Presenca.objects.get_or_create(
            funcionario=funcionario,
            data=data_falta1,
            defaults={
                'tipo_presenca': tipo_falta,
                'observacoes': 'Falta simulada para teste de desconto'
            }
        )
        
        falta2, created2 = Presenca.objects.get_or_create(
            funcionario=funcionario,
            data=data_falta2,
            defaults={
                'tipo_presenca': tipo_falta,
                'observacoes': 'Falta simulada para teste de desconto'
            }
        )
        
        if created1:
            self.stdout.write(f'   ‚úÖ Falta criada: {data_falta1.strftime("%d/%m/%Y")} - {tipo_falta.nome}')
        else:
            self.stdout.write(f'   ‚ÑπÔ∏è  Falta j√° existia: {data_falta1.strftime("%d/%m/%Y")}')
            
        if created2:
            self.stdout.write(f'   ‚úÖ Falta criada: {data_falta2.strftime("%d/%m/%Y")} - {tipo_falta.nome}')
        else:
            self.stdout.write(f'   ‚ÑπÔ∏è  Falta j√° existia: {data_falta2.strftime("%d/%m/%Y")}')
        
        self.stdout.write('')
        
        # Recalcular sal√°rio
        self.stdout.write('üîÑ RECALCULANDO SAL√ÅRIO...')
        funcionario_folha.calcular_salario()
        
        # Mostrar resultado
        self.stdout.write('üí∞ RESULTADO AP√ìS SIMULA√á√ÉO:')
        self.stdout.write(f'   ‚Ä¢ Desconto por faltas: {funcionario_folha.desconto_faltas} MT')
        self.stdout.write(f'   ‚Ä¢ Total de descontos: {funcionario_folha.total_descontos} MT')
        self.stdout.write(f'   ‚Ä¢ Sal√°rio bruto: {funcionario_folha.salario_bruto} MT')
        self.stdout.write(f'   ‚Ä¢ Sal√°rio l√≠quido: {funcionario_folha.salario_liquido} MT')
        self.stdout.write('')
        
        # Verificar c√°lculo manual
        dias_uteis = funcionario_folha.calcular_dias_uteis_mes()
        valor_por_dia = float(funcionario_folha.salario_base) / dias_uteis
        desconto_esperado = valor_por_dia * 2  # 2 faltas
        
        self.stdout.write('üßÆ VERIFICA√á√ÉO DO C√ÅLCULO:')
        self.stdout.write(f'   ‚Ä¢ Dias √∫teis no m√™s: {dias_uteis}')
        self.stdout.write(f'   ‚Ä¢ Valor por dia: {valor_por_dia:.2f} MT')
        self.stdout.write(f'   ‚Ä¢ Faltas registradas: 2')
        self.stdout.write(f'   ‚Ä¢ Desconto esperado: {desconto_esperado:.2f} MT')
        self.stdout.write(f'   ‚Ä¢ Desconto aplicado: {funcionario_folha.desconto_faltas} MT')
        
        if abs(float(funcionario_folha.desconto_faltas) - desconto_esperado) < 0.01:
            self.stdout.write('   ‚úÖ C√°lculo correto!')
        else:
            self.stdout.write('   ‚ùå Erro no c√°lculo!')
        
        self.stdout.write('')
        self.stdout.write('üéØ SISTEMA FUNCIONANDO:')
        self.stdout.write('   ‚Ä¢ Desconto autom√°tico por faltas implementado')
        self.stdout.write('   ‚Ä¢ Integra√ß√£o com folha salarial')
        self.stdout.write('   ‚Ä¢ C√°lculo baseado em dias √∫teis')
        self.stdout.write('   ‚Ä¢ Exibi√ß√£o na interface')
