from django.core.management.base import BaseCommand
from meuprojeto.empresa.models_rh import (
    FolhaSalarial, Funcionario, FuncionarioFolha, 
    BeneficioSalarial, DescontoSalarial, BeneficioFolha, DescontoFolha
)
from datetime import date

class Command(BaseCommand):
    help = 'Demonstra como aplicar benef√≠cios e descontos na folha de sal√°rio'

    def handle(self, *args, **options):
        self.stdout.write('=' * 80)
        self.stdout.write('üéÅ DEMONSTRA√á√ÉO: APLICA√á√ÉO DE BENEF√çCIOS E DESCONTOS NA FOLHA')
        self.stdout.write('=' * 80)
        self.stdout.write('')
        
        # Buscar folha de setembro
        folha = FolhaSalarial.objects.filter(mes_referencia__year=2025, mes_referencia__month=9).first()
        
        if not folha:
            self.stdout.write('‚ùå Folha de setembro n√£o encontrada')
            return
        
        self.stdout.write('üìã SISTEMA DE BENEF√çCIOS E DESCONTOS')
        self.stdout.write('=' * 50)
        self.stdout.write('')
        
        # 1. Mostrar benef√≠cios dispon√≠veis
        self.stdout.write('1Ô∏è‚É£ BENEF√çCIOS DISPON√çVEIS NO SISTEMA:')
        beneficios = BeneficioSalarial.objects.filter(ativo=True).order_by('nome')
        
        if beneficios.exists():
            for beneficio in beneficios:
                self.stdout.write(f'   üéÅ {beneficio.nome} ({beneficio.codigo})')
                self.stdout.write(f'      ‚Ä¢ Tipo: {beneficio.get_tipo_display()}')
                self.stdout.write(f'      ‚Ä¢ Valor: {beneficio.valor} MT')
                self.stdout.write(f'      ‚Ä¢ Base: {beneficio.get_base_calculo_display()}')
                self.stdout.write('')
        else:
            self.stdout.write('   ‚ö†Ô∏è  Nenhum benef√≠cio cadastrado')
            self.stdout.write('')
        
        # 2. Mostrar descontos dispon√≠veis
        self.stdout.write('2Ô∏è‚É£ DESCONTOS DISPON√çVEIS NO SISTEMA:')
        descontos = DescontoSalarial.objects.filter(ativo=True).order_by('nome')
        
        if descontos.exists():
            for desconto in descontos:
                self.stdout.write(f'   üí∏ {desconto.nome} ({desconto.codigo})')
                self.stdout.write(f'      ‚Ä¢ Tipo: {desconto.get_tipo_display()}')
                self.stdout.write(f'      ‚Ä¢ Valor: {desconto.valor} MT')
                self.stdout.write(f'      ‚Ä¢ Base: {desconto.get_base_calculo_display()}')
                self.stdout.write('')
        else:
            self.stdout.write('   ‚ö†Ô∏è  Nenhum desconto cadastrado')
            self.stdout.write('')
        
        # 3. Mostrar funcion√°rios na folha
        self.stdout.write('3Ô∏è‚É£ FUNCION√ÅRIOS NA FOLHA:')
        funcionarios_folha = folha.funcionarios_folha.all().order_by('funcionario__nome_completo')
        
        for func_folha in funcionarios_folha:
            self.stdout.write(f'   üë§ {func_folha.funcionario.nome_completo}:')
            self.stdout.write(f'      ‚Ä¢ Sal√°rio Base: {func_folha.salario_base} MT')
            self.stdout.write(f'      ‚Ä¢ Sal√°rio Bruto: {func_folha.salario_bruto} MT')
            self.stdout.write(f'      ‚Ä¢ Sal√°rio L√≠quido: {func_folha.salario_liquido} MT')
            self.stdout.write(f'      ‚Ä¢ Total Benef√≠cios: {func_folha.total_beneficios} MT')
            self.stdout.write(f'      ‚Ä¢ Total Descontos: {func_folha.total_descontos} MT')
            self.stdout.write('')
        
        # 4. Demonstrar aplica√ß√£o de benef√≠cios
        if beneficios.exists() and funcionarios_folha.exists():
            self.stdout.write('4Ô∏è‚É£ APLICANDO BENEF√çCIOS NA FOLHA:')
            
            # Pegar primeiro funcion√°rio e primeiro benef√≠cio
            funcionario_folha = funcionarios_folha.first()
            beneficio = beneficios.first()
            
            # Verificar se j√° existe
            beneficio_existente = BeneficioFolha.objects.filter(
                funcionario_folha=funcionario_folha,
                beneficio=beneficio
            ).first()
            
            if not beneficio_existente:
                # Aplicar benef√≠cio
                BeneficioFolha.objects.create(
                    funcionario_folha=funcionario_folha,
                    beneficio=beneficio,
                    valor=beneficio.valor,
                    observacoes='Demonstra√ß√£o de aplica√ß√£o de benef√≠cio'
                )
                
                # Recalcular sal√°rio
                funcionario_folha.calcular_salario()
                folha.calcular_totais()
                
                self.stdout.write(f'   ‚úÖ Benef√≠cio "{beneficio.nome}" aplicado a {funcionario_folha.funcionario.nome_completo}')
                self.stdout.write(f'      ‚Ä¢ Valor aplicado: {beneficio.valor} MT')
                self.stdout.write(f'      ‚Ä¢ Novo sal√°rio bruto: {funcionario_folha.salario_bruto} MT')
                self.stdout.write(f'      ‚Ä¢ Novo sal√°rio l√≠quido: {funcionario_folha.salario_liquido} MT')
            else:
                self.stdout.write(f'   ‚ÑπÔ∏è  Benef√≠cio "{beneficio.nome}" j√° aplicado a {funcionario_folha.funcionario.nome_completo}')
                self.stdout.write(f'      ‚Ä¢ Valor atual: {beneficio_existente.valor} MT')
            
            self.stdout.write('')
        
        # 5. Demonstrar aplica√ß√£o de descontos
        if descontos.exists() and funcionarios_folha.exists():
            self.stdout.write('5Ô∏è‚É£ APLICANDO DESCONTOS NA FOLHA:')
            
            # Pegar primeiro funcion√°rio e primeiro desconto
            funcionario_folha = funcionarios_folha.first()
            desconto = descontos.first()
            
            # Verificar se j√° existe
            desconto_existente = DescontoFolha.objects.filter(
                funcionario_folha=funcionario_folha,
                desconto=desconto
            ).first()
            
            if not desconto_existente:
                # Aplicar desconto
                DescontoFolha.objects.create(
                    funcionario_folha=funcionario_folha,
                    desconto=desconto,
                    valor=desconto.valor,
                    observacoes='Demonstra√ß√£o de aplica√ß√£o de desconto'
                )
                
                # Recalcular sal√°rio
                funcionario_folha.calcular_salario()
                folha.calcular_totais()
                
                self.stdout.write(f'   ‚úÖ Desconto "{desconto.nome}" aplicado a {funcionario_folha.funcionario.nome_completo}')
                self.stdout.write(f'      ‚Ä¢ Valor aplicado: {desconto.valor} MT')
                self.stdout.write(f'      ‚Ä¢ Novo sal√°rio bruto: {funcionario_folha.salario_bruto} MT')
                self.stdout.write(f'      ‚Ä¢ Novo sal√°rio l√≠quido: {funcionario_folha.salario_liquido} MT')
            else:
                self.stdout.write(f'   ‚ÑπÔ∏è  Desconto "{desconto.nome}" j√° aplicado a {funcionario_folha.funcionario.nome_completo}')
                self.stdout.write(f'      ‚Ä¢ Valor atual: {desconto_existente.valor} MT')
            
            self.stdout.write('')
        
        # 6. Mostrar benef√≠cios e descontos aplicados na folha
        self.stdout.write('6Ô∏è‚É£ BENEF√çCIOS E DESCONTOS APLICADOS NA FOLHA:')
        
        # Benef√≠cios aplicados
        beneficios_folha = BeneficioFolha.objects.filter(
            funcionario_folha__folha=folha
        ).select_related('funcionario_folha__funcionario', 'beneficio')
        
        if beneficios_folha.exists():
            self.stdout.write('   üéÅ BENEF√çCIOS:')
            for bf in beneficios_folha:
                self.stdout.write(f'      ‚Ä¢ {bf.funcionario_folha.funcionario.nome_completo}: {bf.beneficio.nome} = {bf.valor} MT')
        else:
            self.stdout.write('   ‚ÑπÔ∏è  Nenhum benef√≠cio aplicado na folha')
        
        # Descontos aplicados
        descontos_folha = DescontoFolha.objects.filter(
            funcionario_folha__folha=folha
        ).select_related('funcionario_folha__funcionario', 'desconto')
        
        if descontos_folha.exists():
            self.stdout.write('   üí∏ DESCONTOS:')
            for df in descontos_folha:
                self.stdout.write(f'      ‚Ä¢ {df.funcionario_folha.funcionario.nome_completo}: {df.desconto.nome} = {df.valor} MT')
        else:
            self.stdout.write('   ‚ÑπÔ∏è  Nenhum desconto aplicado na folha')
        
        self.stdout.write('')
        
        # 7. Resumo final da folha
        self.stdout.write('7Ô∏è‚É£ RESUMO FINAL DA FOLHA:')
        folha.calcular_totais()  # Recalcular para ter dados atualizados
        
        self.stdout.write(f'   ‚Ä¢ M√™s: {folha.mes_referencia.strftime("%B/%Y")}')
        self.stdout.write(f'   ‚Ä¢ Status: {folha.get_status_display()}')
        self.stdout.write(f'   ‚Ä¢ Total Funcion√°rios: {folha.total_funcionarios}')
        self.stdout.write(f'   ‚Ä¢ Total Bruto: {folha.total_bruto} MT')
        self.stdout.write(f'   ‚Ä¢ Total Descontos: {folha.total_descontos} MT')
        self.stdout.write(f'   ‚Ä¢ Total L√≠quido: {folha.total_liquido} MT')
        self.stdout.write('')
        
        # 8. Como usar o sistema
        self.stdout.write('8Ô∏è‚É£ COMO USAR O SISTEMA:')
        self.stdout.write('')
        
        self.stdout.write('   üìã GEST√ÉO DE BENEF√çCIOS E DESCONTOS:')
        self.stdout.write('      1. Acesse: /rh/salarios/beneficios/ (para benef√≠cios)')
        self.stdout.write('      2. Acesse: /rh/salarios/descontos/ (para descontos)')
        self.stdout.write('      3. Cadastre os benef√≠cios/descontos que ser√£o usados')
        self.stdout.write('')
        
        self.stdout.write('   üéØ APLICA√á√ÉO NA FOLHA:')
        self.stdout.write('      1. Acesse a folha: /rh/folha-salarial/detalhes/<id>/')
        self.stdout.write('      2. Clique em "Benef√≠cios" ou "Descontos"')
        self.stdout.write('      3. Selecione o funcion√°rio e o benef√≠cio/desconto')
        self.stdout.write('      4. Defina o valor e observa√ß√µes')
        self.stdout.write('      5. O sistema recalcula automaticamente')
        self.stdout.write('')
        
        self.stdout.write('   üîÑ FLUXO AUTOM√ÅTICO:')
        self.stdout.write('      1. Benef√≠cio/Desconto √© aplicado na folha')
        self.stdout.write('      2. FuncionarioFolha.calcular_salario() √© chamado')
        self.stdout.write('      3. Sal√°rio bruto = base + benef√≠cios')
        self.stdout.write('      4. Sal√°rio l√≠quido = bruto - descontos')
        self.stdout.write('      5. Totais da folha s√£o recalculados')
        self.stdout.write('')
        
        # 9. URLs dispon√≠veis
        self.stdout.write('9Ô∏è‚É£ URLs DISPON√çVEIS:')
        self.stdout.write('')
        
        self.stdout.write('   üéÅ BENEF√çCIOS:')
        self.stdout.write('      ‚Ä¢ Lista: /rh/salarios/beneficios/')
        self.stdout.write('      ‚Ä¢ Adicionar: /rh/salarios/beneficios/adicionar/')
        self.stdout.write('      ‚Ä¢ Editar: /rh/salarios/beneficios/editar/<id>/')
        self.stdout.write('      ‚Ä¢ Deletar: /rh/salarios/beneficios/excluir/<id>/')
        self.stdout.write('')
        
        self.stdout.write('   üí∏ DESCONTOS:')
        self.stdout.write('      ‚Ä¢ Lista: /rh/salarios/descontos/')
        self.stdout.write('      ‚Ä¢ Adicionar: /rh/salarios/descontos/adicionar/')
        self.stdout.write('      ‚Ä¢ Editar: /rh/salarios/descontos/editar/<id>/')
        self.stdout.write('      ‚Ä¢ Deletar: /rh/salarios/descontos/excluir/<id>/')
        self.stdout.write('')
        
        self.stdout.write('   üìä NA FOLHA:')
        self.stdout.write('      ‚Ä¢ Benef√≠cios: /rh/folha-salarial/beneficios/<folha_id>/')
        self.stdout.write('      ‚Ä¢ Descontos: /rh/folha-salarial/descontos/<folha_id>/')
        self.stdout.write('')
        
        self.stdout.write('üéâ SISTEMA DE BENEF√çCIOS E DESCONTOS FUNCIONANDO!')
        self.stdout.write('')
        self.stdout.write('‚úÖ O sistema permite:')
        self.stdout.write('   ‚Ä¢ Cadastrar benef√≠cios e descontos')
        self.stdout.write('   ‚Ä¢ Aplicar na folha de sal√°rio')
        self.stdout.write('   ‚Ä¢ C√°lculo autom√°tico')
        self.stdout.write('   ‚Ä¢ Gest√£o completa via interface')
        self.stdout.write('   ‚Ä¢ Hist√≥rico e auditoria')
