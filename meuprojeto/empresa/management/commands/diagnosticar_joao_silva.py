from django.core.management.base import BaseCommand
from meuprojeto.empresa.models_rh import Funcionario, FolhaSalarial, FuncionarioFolha, Presenca
from datetime import date, timedelta

class Command(BaseCommand):
    help = 'Diagnostica o problema do Jo√£o Silva com dias de trabalho'

    def handle(self, *args, **options):
        self.stdout.write('=== DIAGN√ìSTICO: JO√ÉO SILVA ===')
        self.stdout.write('')
        
        # Buscar Jo√£o Silva
        joao = Funcionario.objects.filter(nome_completo__icontains='joao silva').first()
        if not joao:
            self.stdout.write('‚ùå Jo√£o Silva n√£o encontrado')
            return
        
        self.stdout.write(f'‚úÖ FUNCION√ÅRIO: {joao.nome_completo}')
        self.stdout.write(f'   Status: {joao.status}')
        self.stdout.write(f'   Sal√°rio atual: {joao.salario_atual} MT')
        self.stdout.write('')
        
        # Buscar folha de setembro
        folha = FolhaSalarial.objects.filter(mes_referencia__year=2025, mes_referencia__month=9).first()
        if not folha:
            self.stdout.write('‚ùå Folha de setembro n√£o encontrada')
            return
        
        funcionario_folha = FuncionarioFolha.objects.filter(folha=folha, funcionario=joao).first()
        if not funcionario_folha:
            self.stdout.write('‚ùå Funcion√°rio n√£o encontrado na folha de setembro')
            return
        
        self.stdout.write('üí∞ DADOS DA FOLHA:')
        self.stdout.write(f'   ‚Ä¢ Sal√°rio Base: {funcionario_folha.salario_base} MT')
        self.stdout.write(f'   ‚Ä¢ Dias Trabalhados: {funcionario_folha.dias_trabalhados}')
        self.stdout.write(f'   ‚Ä¢ Horas Trabalhadas: {funcionario_folha.horas_trabalhadas}')
        self.stdout.write(f'   ‚Ä¢ Desconto por Faltas: {funcionario_folha.desconto_faltas} MT')
        self.stdout.write(f'   ‚Ä¢ Total Descontos: {funcionario_folha.total_descontos} MT')
        self.stdout.write(f'   ‚Ä¢ Sal√°rio L√≠quido: {funcionario_folha.salario_liquido} MT')
        self.stdout.write('')
        
        # Verificar presen√ßas do m√™s
        primeiro_dia = folha.mes_referencia.replace(day=1)
        ultimo_dia = (primeiro_dia + timedelta(days=32)).replace(day=1) - timedelta(days=1)
        
        presencas = Presenca.objects.filter(
            funcionario=joao,
            data__gte=primeiro_dia,
            data__lte=ultimo_dia
        ).order_by('data')
        
        self.stdout.write(f'üìÖ PRESEN√áAS EM SETEMBRO ({presencas.count()} registros):')
        for p in presencas:
            self.stdout.write(f'   {p.data.strftime("%d/%m")} - {p.tipo_presenca.nome}')
        
        self.stdout.write('')
        
        # An√°lise
        dias_uteis = funcionario_folha.calcular_dias_uteis_mes()
        self.stdout.write('üîç AN√ÅLISE:')
        self.stdout.write(f'   ‚Ä¢ Dias √∫teis no m√™s: {dias_uteis}')
        self.stdout.write(f'   ‚Ä¢ Dias trabalhados: {funcionario_folha.dias_trabalhados}')
        self.stdout.write(f'   ‚Ä¢ Diferen√ßa: {dias_uteis - funcionario_folha.dias_trabalhados} dias')
        
        if funcionario_folha.dias_trabalhados < dias_uteis:
            self.stdout.write(f'   ‚ö†Ô∏è  FUNCION√ÅRIO TEM {dias_uteis - funcionario_folha.dias_trabalhados} DIA(S) A MENOS!')
            
            # Verificar se h√° desconto por faltas
            if funcionario_folha.desconto_faltas > 0:
                self.stdout.write(f'   ‚úÖ Desconto por faltas aplicado: {funcionario_folha.desconto_faltas} MT')
            else:
                self.stdout.write(f'   ‚ùå PROBLEMA: Nenhum desconto por faltas aplicado!')
                
                # Verificar presen√ßas que descontam
                presencas_faltas = presencas.filter(tipo_presenca__desconta_salario=True)
                self.stdout.write(f'   ‚Ä¢ Presen√ßas que descontam: {presencas_faltas.count()}')
                
                if presencas_faltas.count() == 0:
                    self.stdout.write(f'   üîß SOLU√á√ÉO: Marcar as faltas como tipo que desconta sal√°rio')
                    self.stdout.write(f'      Tipos que descontam: Ausente (AU), Falta Injustificada (FI), Suspens√£o (SU)')
        else:
            self.stdout.write(f'   ‚úÖ Funcion√°rio trabalhou todos os dias √∫teis')
        
        self.stdout.write('')
        self.stdout.write('üéØ DIAGN√ìSTICO COMPLETO!')
