# Generated by Django 5.2.6 on 2025-09-22 08:07

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('empresa', '0055_remove_redundant_subsidy_fields'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Fornecedor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome ou razão social do fornecedor', max_length=200)),
                ('tipo', models.CharField(choices=[('PESSOA_FISICA', 'Pessoa Física'), ('PESSOA_JURIDICA', 'Pessoa Jurídica')], default='PESSOA_JURIDICA', help_text='Tipo de fornecedor', max_length=20)),
                ('nuit', models.CharField(help_text='Número de Identificação Única do Trabalhador (NUIT)', max_length=20, unique=True)),
                ('email', models.EmailField(help_text='Email de contato', max_length=254)),
                ('telefone', models.CharField(help_text='Número de telefone com código do país (+258)', max_length=13)),
                ('endereco', models.TextField(help_text='Endereço completo')),
                ('cidade', models.CharField(help_text='Cidade', max_length=100)),
                ('provincia', models.CharField(help_text='Província', max_length=50)),
                ('ativo', models.BooleanField(default=True, help_text='Indica se o fornecedor está ativo')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, help_text='Data de cadastro do fornecedor')),
                ('observacoes', models.TextField(blank=True, help_text='Observações sobre o fornecedor')),
            ],
            options={
                'verbose_name': 'Fornecedor',
                'verbose_name_plural': 'Fornecedores',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Provincia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True, verbose_name='Nome da Província')),
                ('codigo', models.CharField(max_length=3, unique=True, verbose_name='Código')),
                ('ativa', models.BooleanField(default=True, verbose_name='Ativa')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
            ],
            options={
                'verbose_name': 'Província',
                'verbose_name_plural': 'Províncias',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='TipoMovimentoStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome do tipo de movimento', max_length=100)),
                ('codigo', models.CharField(help_text='Código único do tipo de movimento', max_length=20, unique=True)),
                ('descricao', models.TextField(blank=True, help_text='Descrição do tipo de movimento')),
                ('aumenta_estoque', models.BooleanField(default=True, help_text='Indica se este tipo de movimento aumenta o estoque')),
                ('ativo', models.BooleanField(default=True, help_text='Indica se o tipo de movimento está ativo')),
            ],
            options={
                'verbose_name': 'Tipo de Movimento de Stock',
                'verbose_name_plural': 'Tipos de Movimento de Stock',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='CategoriaProduto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome da categoria', max_length=100)),
                ('codigo', models.CharField(help_text='Código único da categoria', max_length=20, unique=True)),
                ('descricao', models.TextField(blank=True, help_text='Descrição da categoria')),
                ('ativa', models.BooleanField(default=True, help_text='Indica se a categoria está ativa')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, help_text='Data de criação da categoria')),
                ('categoria_pai', models.ForeignKey(blank=True, help_text='Categoria pai (para hierarquia)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategorias', to='empresa.categoriaproduto')),
            ],
            options={
                'verbose_name': 'Categoria de Produto',
                'verbose_name_plural': 'Categorias de Produtos',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Produto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome do produto', max_length=200)),
                ('codigo', models.CharField(help_text='Código único do produto', max_length=50, unique=True)),
                ('codigo_barras', models.CharField(blank=True, help_text='Código de barras do produto', max_length=50)),
                ('descricao', models.TextField(blank=True, help_text='Descrição detalhada do produto')),
                ('unidade_medida', models.CharField(choices=[('UN', 'Unidade'), ('KG', 'Quilograma'), ('G', 'Grama'), ('L', 'Litro'), ('ML', 'Mililitro'), ('M', 'Metro'), ('CM', 'Centímetro'), ('M2', 'Metro Quadrado'), ('M3', 'Metro Cúbico'), ('CX', 'Caixa'), ('PC', 'Peça'), ('DZ', 'Dúzia'), ('GR', 'Grosa')], default='UN', help_text='Unidade de medida do produto', max_length=10)),
                ('preco_custo', models.DecimalField(decimal_places=2, help_text='Preço de custo do produto', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('preco_venda', models.DecimalField(decimal_places=2, help_text='Preço de venda do produto', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('margem_lucro', models.DecimalField(decimal_places=2, help_text='Margem de lucro em percentagem', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('999.99'))])),
                ('estoque_minimo', models.PositiveIntegerField(default=0, help_text='Quantidade mínima em estoque')),
                ('estoque_maximo', models.PositiveIntegerField(default=0, help_text='Quantidade máxima em estoque')),
                ('status', models.CharField(choices=[('ATIVO', 'Ativo'), ('INATIVO', 'Inativo'), ('DESCONTINUADO', 'Descontinuado')], default='ATIVO', help_text='Status do produto', max_length=20)),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, help_text='Data de cadastro do produto')),
                ('data_atualizacao', models.DateTimeField(auto_now=True, help_text='Data da última atualização')),
                ('observacoes', models.TextField(blank=True, help_text='Observações sobre o produto')),
                ('categoria', models.ForeignKey(help_text='Categoria do produto', on_delete=django.db.models.deletion.PROTECT, related_name='produtos', to='empresa.categoriaproduto')),
                ('fornecedor_principal', models.ForeignKey(blank=True, help_text='Fornecedor principal do produto', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='produtos_principais', to='empresa.fornecedor')),
            ],
            options={
                'verbose_name': 'Produto',
                'verbose_name_plural': 'Produtos',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Cidade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome da Cidade')),
                ('codigo', models.CharField(max_length=10, unique=True, verbose_name='Código')),
                ('ativa', models.BooleanField(default=True, verbose_name='Ativa')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('provincia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cidades', to='empresa.provincia', verbose_name='Província')),
            ],
            options={
                'verbose_name': 'Cidade',
                'verbose_name_plural': 'Cidades',
                'ordering': ['provincia__nome', 'nome'],
                'unique_together': {('nome', 'provincia')},
            },
        ),
        migrations.CreateModel(
            name='MovimentoStock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantidade', models.PositiveIntegerField(help_text='Quantidade movimentada')),
                ('preco_unitario', models.DecimalField(decimal_places=2, help_text='Preço unitário do produto no movimento', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('valor_total', models.DecimalField(decimal_places=2, help_text='Valor total do movimento', max_digits=12)),
                ('data_movimento', models.DateTimeField(default=django.utils.timezone.now, help_text='Data e hora do movimento')),
                ('referencia', models.CharField(blank=True, help_text='Referência do movimento (ex: número da nota fiscal)', max_length=100)),
                ('observacoes', models.TextField(blank=True, help_text='Observações sobre o movimento')),
                ('sucursal', models.ForeignKey(help_text='Sucursal onde ocorreu o movimento', on_delete=django.db.models.deletion.CASCADE, related_name='movimentos_stock', to='empresa.sucursal')),
                ('usuario', models.ForeignKey(help_text='Usuário que registrou o movimento', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('produto', models.ForeignKey(help_text='Produto movimentado', on_delete=django.db.models.deletion.CASCADE, related_name='movimentos', to='empresa.produto')),
                ('tipo_movimento', models.ForeignKey(help_text='Tipo de movimento', on_delete=django.db.models.deletion.PROTECT, related_name='movimentos', to='empresa.tipomovimentostock')),
            ],
            options={
                'verbose_name': 'Movimento de Stock',
                'verbose_name_plural': 'Movimentos de Stock',
                'ordering': ['-data_movimento'],
            },
        ),
        migrations.CreateModel(
            name='TransferenciaFuncionario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDENTE', 'Pendente'), ('APROVADO', 'Aprovado'), ('REJEITADO', 'Rejeitado'), ('IMPLEMENTADO', 'Implementado'), ('CANCELADO', 'Cancelado')], default='PENDENTE', max_length=20)),
                ('data_solicitacao', models.DateField()),
                ('data_aprovacao', models.DateField(blank=True, null=True)),
                ('data_implementacao', models.DateField(blank=True, null=True)),
                ('data_efetivacao', models.DateField(blank=True, null=True)),
                ('data_efetiva', models.DateField(verbose_name='Data Efetiva da Transferência')),
                ('motivo', models.TextField(verbose_name='Motivo da Transferência')),
                ('observacoes', models.TextField(blank=True)),
                ('motivo_rejeicao', models.TextField(blank=True)),
                ('data_criacao', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('aprovado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transferencias_aprovadas', to=settings.AUTH_USER_MODEL)),
                ('cargo_novo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='empresa.cargo', verbose_name='Novo Cargo (opcional)')),
                ('criado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transferencias_criadas', to=settings.AUTH_USER_MODEL)),
                ('departamento_destino', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transferencias_destino', to='empresa.departamento', verbose_name='Departamento de Destino')),
                ('departamento_origem', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transferencias_origem', to='empresa.departamento', verbose_name='Departamento de Origem')),
                ('funcionario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='empresa.funcionario', verbose_name='Funcionário')),
                ('rejeitado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transferencias_rejeitadas', to=settings.AUTH_USER_MODEL)),
                ('sucursal_destino', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transferencias_destino', to='empresa.sucursal', verbose_name='Sucursal de Destino')),
                ('sucursal_origem', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transferencias_origem', to='empresa.sucursal', verbose_name='Sucursal de Origem')),
            ],
            options={
                'verbose_name': 'Transferência de Funcionário',
                'verbose_name_plural': 'Transferências de Funcionários',
                'ordering': ['-data_solicitacao'],
            },
        ),
        migrations.CreateModel(
            name='Bairro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome do Bairro')),
                ('codigo', models.CharField(max_length=15, unique=True, verbose_name='Código')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
                ('cidade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bairros', to='empresa.cidade', verbose_name='Cidade')),
            ],
            options={
                'verbose_name': 'Bairro',
                'verbose_name_plural': 'Bairros',
                'ordering': ['cidade__provincia__nome', 'cidade__nome', 'nome'],
                'unique_together': {('nome', 'cidade')},
            },
        ),
        migrations.CreateModel(
            name='FornecedorProduto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preco_fornecedor', models.DecimalField(decimal_places=2, help_text='Preço praticado pelo fornecedor', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('prazo_entrega', models.PositiveIntegerField(default=0, help_text='Prazo de entrega em dias')),
                ('ativo', models.BooleanField(default=True, help_text='Indica se o fornecedor está ativo para este produto')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True, help_text='Data de cadastro da relação')),
                ('fornecedor', models.ForeignKey(help_text='Fornecedor', on_delete=django.db.models.deletion.CASCADE, related_name='produtos_fornecidos', to='empresa.fornecedor')),
                ('produto', models.ForeignKey(help_text='Produto fornecido', on_delete=django.db.models.deletion.CASCADE, related_name='fornecedores', to='empresa.produto')),
            ],
            options={
                'verbose_name': 'Fornecedor por Produto',
                'verbose_name_plural': 'Fornecedores por Produtos',
                'ordering': ['fornecedor__nome', 'produto__nome'],
                'unique_together': {('fornecedor', 'produto')},
            },
        ),
        migrations.CreateModel(
            name='StockSucursal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantidade_atual', models.PositiveIntegerField(default=0, help_text='Quantidade atual em stock')),
                ('quantidade_reservada', models.PositiveIntegerField(default=0, help_text='Quantidade reservada (não disponível)')),
                ('localizacao', models.CharField(blank=True, help_text='Localização física do produto na sucursal', max_length=100)),
                ('data_atualizacao', models.DateTimeField(auto_now=True, help_text='Data da última atualização do stock')),
                ('produto', models.ForeignKey(help_text='Produto', on_delete=django.db.models.deletion.CASCADE, related_name='stocks_sucursais', to='empresa.produto')),
                ('sucursal', models.ForeignKey(help_text='Sucursal', on_delete=django.db.models.deletion.CASCADE, related_name='stocks', to='empresa.sucursal')),
            ],
            options={
                'verbose_name': 'Stock por Sucursal',
                'verbose_name_plural': 'Stocks por Sucursais',
                'ordering': ['produto__nome'],
                'unique_together': {('produto', 'sucursal')},
            },
        ),
    ]
