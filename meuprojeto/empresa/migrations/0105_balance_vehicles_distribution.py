# Generated by Django 5.2.6 on 2025-10-16 10:14

from django.db import migrations


def balance_vehicles_distribution(apps, schema_editor):
    """
    Redistribui os veículos para equilibrar os meios circulantes entre sucursais
    """
    Transportadora = apps.get_model('empresa', 'Transportadora')
    Sucursal = apps.get_model('empresa', 'Sucursal')
    
    # Obter sucursais
    sede = Sucursal.objects.get(nome='Sede - Conception')
    marracuene = Sucursal.objects.get(nome='LOJA DE MARRACUENE')
    
    # Mover um automóvel da Sede para Marracuene para equilibrar
    # Vamos mover o SED-AUTO-02 (ID: 14) para Marracuene
    viatura_mover = Transportadora.objects.get(id=14)
    viatura_mover.sucursal = marracuene
    
    # Regenerar nome baseado na nova sucursal
    categoria_abrev = {
        'AUTOMOVEL': 'AUTO',
        'MOTOCICLETA': 'MOTO',
        'VAN': 'VAN',
        'CAMINHAO': 'CAM',
        'BICICLETA': 'BIC',
        'PICKUP': 'PIC',
        'CAMINHONETE': 'CAM',
        'ONIBUS': 'ONI',
        'AMBULANCIA': 'AMB',
    }
    
    abrev_categoria = categoria_abrev.get(viatura_mover.categoria_veiculo, 'VEI')
    abrev_sucursal = marracuene.nome[:3].upper()
    
    # Contar quantas viaturas já existem desta categoria nesta sucursal
    count = Transportadora.objects.filter(
        tipo='VIATURA_INTERNA',
        sucursal=marracuene,
        categoria_veiculo=viatura_mover.categoria_veiculo
    ).exclude(id=viatura_mover.id).count()
    
    numero = count + 1
    novo_nome = f"{abrev_sucursal}-{abrev_categoria}-{numero:02d}"
    viatura_mover.nome = novo_nome
    
    viatura_mover.save()
    print(f"Veículo movido: {viatura_mover.nome} -> {marracuene.nome}")
    
    # Verificar distribuição final
    distribuicao = {}
    viaturas = Transportadora.objects.filter(tipo='VIATURA_INTERNA')
    for v in viaturas:
        distribuicao[v.sucursal.nome] = distribuicao.get(v.sucursal.nome, 0) + 1
    
    print("Nova distribuição:")
    for sucursal, total in distribuicao.items():
        print(f"{sucursal}: {total} veículos")


def reverse_balance(apps, schema_editor):
    """
    Reverte o equilíbrio (não fazemos nada específico)
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('empresa', '0104_final_fix_vehicle_names'),
    ]

    operations = [
        migrations.RunPython(balance_vehicles_distribution, reverse_balance),
    ]
