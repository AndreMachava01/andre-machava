# Generated by Django 5.2.6 on 2025-10-16 10:06

from django.db import migrations


def fix_duplicate_vehicle_names(apps, schema_editor):
    """
    Corrige nomes duplicados dos veículos
    """
    Transportadora = apps.get_model('empresa', 'Transportadora')
    
    # Obter todos os veículos
    viaturas = Transportadora.objects.filter(tipo='VIATURA_INTERNA').order_by('id')
    
    # Mapear categorias para abreviações
    categoria_abrev = {
        'AUTOMOVEL': 'AUTO',
        'MOTOCICLETA': 'MOTO',
        'VAN': 'VAN',
        'CAMINHAO': 'CAM',
        'BICICLETA': 'BIC',
        'PICKUP': 'PIC',
        'CAMINHONETE': 'CAM',
        'ONIBUS': 'ONI',
        'AMBULANCIA': 'AMB',
    }
    
    # Renomear cada veículo baseado na sua sucursal e categoria
    for viatura in viaturas:
        if viatura.sucursal and viatura.categoria_veiculo:
            abrev_categoria = categoria_abrev.get(viatura.categoria_veiculo, 'VEI')
            abrev_sucursal = viatura.sucursal.nome[:3].upper()
            
            # Contar quantas viaturas já existem desta categoria nesta sucursal
            count = Transportadora.objects.filter(
                tipo='VIATURA_INTERNA',
                sucursal=viatura.sucursal,
                categoria_veiculo=viatura.categoria_veiculo
            ).exclude(id=viatura.id).count()
            
            numero = count + 1
            novo_nome = f"{abrev_sucursal}-{abrev_categoria}-{numero:02d}"
            
            if viatura.nome != novo_nome:
                viatura.nome = novo_nome
                viatura.save()
                print(f"Nome corrigido: {viatura.nome} -> {novo_nome}")


def reverse_fix_names(apps, schema_editor):
    """
    Reverte a correção de nomes (não fazemos nada específico)
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('empresa', '0102_redistribute_vehicles_sucursals'),
    ]

    operations = [
        migrations.RunPython(fix_duplicate_vehicle_names, reverse_fix_names),
    ]
