# Generated by Django 5.2.6 on 2025-10-16 10:07

from django.db import migrations


def final_fix_vehicle_names(apps, schema_editor):
    """
    Corrige definitivamente os nomes dos veículos de forma sequencial
    """
    Transportadora = apps.get_model('empresa', 'Transportadora')
    
    # Mapear categorias para abreviações
    categoria_abrev = {
        'AUTOMOVEL': 'AUTO',
        'MOTOCICLETA': 'MOTO',
        'VAN': 'VAN',
        'CAMINHAO': 'CAM',
        'BICICLETA': 'BIC',
        'PICKUP': 'PIC',
        'CAMINHONETE': 'CAM',
        'ONIBUS': 'ONI',
        'AMBULANCIA': 'AMB',
    }
    
    # Renomear cada veículo individualmente com nomes únicos
    viaturas_por_sucursal = {}
    
    # Agrupar veículos por sucursal e categoria
    viaturas = Transportadora.objects.filter(tipo='VIATURA_INTERNA').order_by('id')
    
    for viatura in viaturas:
        if viatura.sucursal and viatura.categoria_veiculo:
            key = f"{viatura.sucursal.id}_{viatura.categoria_veiculo}"
            if key not in viaturas_por_sucursal:
                viaturas_por_sucursal[key] = []
            viaturas_por_sucursal[key].append(viatura)
    
    # Renomear cada grupo sequencialmente
    for key, grupo_viaturas in viaturas_por_sucursal.items():
        sucursal = grupo_viaturas[0].sucursal
        categoria = grupo_viaturas[0].categoria_veiculo
        
        abrev_categoria = categoria_abrev.get(categoria, 'VEI')
        abrev_sucursal = sucursal.nome[:3].upper()
        
        for i, viatura in enumerate(grupo_viaturas, 1):
            novo_nome = f"{abrev_sucursal}-{abrev_categoria}-{i:02d}"
            if viatura.nome != novo_nome:
                viatura.nome = novo_nome
                viatura.save()
                print(f"Nome final: {viatura.id} -> {novo_nome}")


def reverse_final_fix(apps, schema_editor):
    """
    Reverte a correção final (não fazemos nada específico)
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('empresa', '0103_fix_duplicate_vehicle_names'),
    ]

    operations = [
        migrations.RunPython(final_fix_vehicle_names, reverse_final_fix),
    ]
