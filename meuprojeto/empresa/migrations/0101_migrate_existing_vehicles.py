# Generated by Django 5.2.6 on 2025-10-16 10:03

from django.db import migrations


def migrate_existing_vehicles(apps, schema_editor):
    """
    Migra dados dos veículos existentes para a nova estrutura
    """
    Transportadora = apps.get_model('empresa', 'Transportadora')
    Sucursal = apps.get_model('empresa', 'Sucursal')
    
    # Obter a primeira sucursal ativa como padrão
    sucursal_padrao = Sucursal.objects.filter(ativa=True).first()
    
    # Mapear nomes existentes para categorias
    categoria_mapping = {
        'Carro Executivo': 'AUTOMOVEL',
        'Moto de Entregas Rápidas': 'MOTOCICLETA', 
        'Van de Entregas - Matola': 'VAN',
        'Van de Manutenção': 'VAN',
    }
    
    # Mapear nomes existentes para sucursais baseado no nome
    sucursal_mapping = {
        'Van de Entregas - Matola': 'Matola',
    }
    
    viaturas = Transportadora.objects.filter(tipo='VIATURA_INTERNA')
    
    for viatura in viaturas:
        # Definir categoria se não tiver
        if not viatura.categoria_veiculo:
            categoria = categoria_mapping.get(viatura.nome, 'AUTOMOVEL')
            viatura.categoria_veiculo = categoria
            
        # Definir sucursal se não tiver
        if not viatura.sucursal:
            # Tentar encontrar sucursal pelo nome
            nome_sucursal = sucursal_mapping.get(viatura.nome)
            if nome_sucursal:
                sucursal = Sucursal.objects.filter(
                    nome__icontains=nome_sucursal, 
                    ativa=True
                ).first()
                if sucursal:
                    viatura.sucursal = sucursal
                else:
                    viatura.sucursal = sucursal_padrao
            else:
                viatura.sucursal = sucursal_padrao
                
        # Definir status se não tiver
        if not viatura.status:
            viatura.status = 'ATIVA'
            
        # Gerar nome automático se necessário
        if viatura.sucursal and viatura.categoria_veiculo:
            # Mapear categorias para abreviações
            categoria_abrev = {
                'AUTOMOVEL': 'AUTO',
                'MOTOCICLETA': 'MOTO',
                'VAN': 'VAN',
                'CAMINHAO': 'CAM',
                'BICICLETA': 'BIC',
                'PICKUP': 'PIC',
                'CAMINHONETE': 'CAM',
                'ONIBUS': 'ONI',
                'AMBULANCIA': 'AMB',
            }
            
            abrev_categoria = categoria_abrev.get(viatura.categoria_veiculo, 'VEI')
            abrev_sucursal = viatura.sucursal.nome[:3].upper()
            
            # Contar quantas viaturas já existem desta categoria nesta sucursal
            count = Transportadora.objects.filter(
                tipo='VIATURA_INTERNA',
                sucursal=viatura.sucursal,
                categoria_veiculo=viatura.categoria_veiculo
            ).exclude(id=viatura.id).count()
            
            numero = count + 1
            nome_auto = f"{abrev_sucursal}-{abrev_categoria}-{numero:02d}"
            
            # Só atualizar se o nome atual não seguir o padrão
            if not viatura.nome.startswith(f"{abrev_sucursal}-{abrev_categoria}-"):
                viatura.nome = nome_auto
                
        viatura.save()
        print(f"Migrado: {viatura.nome} - Categoria: {viatura.categoria_veiculo} - Sucursal: {viatura.sucursal}")


def reverse_migration(apps, schema_editor):
    """
    Reverte a migração (não fazemos nada específico)
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('empresa', '0100_add_sucursal_to_transportadora'),
    ]

    operations = [
        migrations.RunPython(migrate_existing_vehicles, reverse_migration),
    ]
